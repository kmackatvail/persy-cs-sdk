using System;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using com.persephony.api.recording;
using com.persephony.api;
using System.Reflection;
using System.Net;
using System.IO;
using System.Linq;
using com.persephony;

namespace persy_cs_sdk_test.api.recording
{
    [TestClass]
    public class RecordingsRequesterTest
    {
        [TestMethod]
        public void GetRecordingListTest()
        {
            try
            {
                RecordingsRequester recordingsRequester = new RecordingsRequester("AC736ca2078721a9a41fb47f07bf40d9e21cb304da", "8e3d1c1c519fc761856f8cc825bcfea94d8c58b5", "AC736ca2078721a9a41fb47f07bf40d9e21cb304da");

                Type type = typeof(APIRequester);
                FieldInfo fieldInfo = type.GetField("persyUrl", BindingFlags.NonPublic | BindingFlags.Instance);
                if (fieldInfo != null)
                {
                    fieldInfo.SetValue(recordingsRequester, "http://GetRecordingListTest:3000");
                }

                WebRequest.RegisterPrefix("http://GetRecordingListTest:3000", new TestWebRequestCreate());

                TestWebRequestCreate.MockHttpWebRequestWithGivenResponseCode(HttpStatusCode.OK,
                                                                             "{\"total\":3,\"start\":0,\"end\":1,\"page\":0,\"numPages\":2,\"pageSize\":2,\"nextPageUri\":\"/Accounts/ACabe7063197551fe51671f9ac3a9708e9dad51c4d/Recordings&cursor=492dc883a811bd0204204ea9047122f93a2788a2\",\"recordings\":[{\"uri\":\"/Accounts/ACabe7063197551fe51671f9ac3a9708e9dad51c4d/Recordings/REb1eecfce410141ad1749c0fc84dfbb6fc4c2a810\",\"revision\":1,\"dateCreated\":\"Mon, 27 Jun 2016 17:53:55 GMT\",\"dateUpdated\":\"Mon, 27 Jun 2016 17:53:55 GMT\",\"recordingId\":\"REb1eecfce410141ad1749c0fc84dfbb6fc4c2a810\",\"accountId\":\"ACabe7063197551fe51671f9ac3a9708e9dad51c4d\",\"callId\":\"CF3cb8a52f461bcf64cbd3111d9492c3f61943eef9\",\"duration\":9},{\"uri\":\"/Accounts/ACabe7063197551fe51671f9ac3a9708e9dad51c4d/Recordings/RE9cae4798ca0803cbd52209c1bfe99d25027cc2cf\",\"revision\":1,\"dateCreated\":\"Mon, 27 Jun 2016 20:38:16 GMT\",\"dateUpdated\":\"Mon, 27 Jun 2016 20:38:16 GMT\",\"recordingId\":\"RE9cae4798ca0803cbd52209c1bfe99d25027cc2cf\",\"accountId\":\"ACabe7063197551fe51671f9ac3a9708e9dad51c4d\",\"callId\":\"CFa32e912be62fff5d0b1bcd99610a69281918800a\",\"duration\":9}]}");

                RecordingList recordingList = recordingsRequester.getMeta();

                Assert.IsNotNull(recordingList);

                Assert.AreEqual(recordingList.getLocalSize, 2);
                Assert.AreEqual((recordingList.export()).Count, 2);

                Recording recording = recordingList.get(0) as Recording;

                Assert.IsNotNull(recording);
                Assert.AreEqual(recording.getRecordingId, "REb1eecfce410141ad1749c0fc84dfbb6fc4c2a810");

                type = typeof(APIRequester);
                fieldInfo = type.GetField("persyUrl", BindingFlags.NonPublic | BindingFlags.Instance);
                if (fieldInfo != null)
                {
                    fieldInfo.SetValue(recordingList, "http://GetRecordingListTest:3000");
                }

                TestWebRequestCreate.MockHttpWebRequestWithGivenResponseCode(HttpStatusCode.OK,
                                                                             "{\"total\":3,\"start\":2,\"end\":2,\"page\":1,\"numPages\":2,\"pageSize\":2,\"nextPageUri\":null,\"recordings\":[{\"uri\":\"/Accounts/ACabe7063197551fe51671f9ac3a9708e9dad51c4d/Recordings/REb1eecfce410141ad1749c0fc84dfbb6fc4c2a815\",\"revision\":1,\"dateCreated\":\"Mon, 27 Jun 2016 17:53:55 GMT\",\"dateUpdated\":\"Mon, 27 Jun 2016 17:53:55 GMT\",\"recordingId\":\"REb1eecfce410141ad1749c0fc84dfbb6fc4c2a815\",\"accountId\":\"ACabe7063197551fe51671f9ac3a9708e9dad51c4d\",\"callId\":\"CF3cb8a52f461bcf64cbd3111d9492c3f61943eef9\",\"duration\":9}]}");

                recordingList.loadNextPage();

                Assert.IsNotNull(recordingList);

                Assert.AreEqual(recordingList.getLocalSize, 3);
                Assert.AreEqual((recordingList.export()).Count, 3);

                recording = recordingList.get(2) as Recording;
                Assert.IsNotNull(recording);
                Assert.AreEqual(recording.getRecordingId, "REb1eecfce410141ad1749c0fc84dfbb6fc4c2a815");
            }
            catch (PersyException pe)
            {
                Assert.Fail(pe.Message);
            }
        }

        [TestMethod]
        public void GetRecordingListByCallIdTest()
        {
            try
            {
                RecordingsRequester recordingsRequester = new RecordingsRequester("AC736ca2078721a9a41fb47f07bf40d9e21cb304da", "8e3d1c1c519fc761856f8cc825bcfea94d8c58b5", "AC736ca2078721a9a41fb47f07bf40d9e21cb304da");

                Type type = typeof(APIRequester);
                FieldInfo fieldInfo = type.GetField("persyUrl", BindingFlags.NonPublic | BindingFlags.Instance);
                if (fieldInfo != null)
                {
                    fieldInfo.SetValue(recordingsRequester, "http://GetRecordingListTest:3000");
                }

                WebRequest.RegisterPrefix("http://GetRecordingListTest:3000/Accounts/AC736ca2078721a9a41fb47f07bf40d9e21cb304da/Recordings?callId=CF3cb8a52f461bcf64cbd3111d9492c3f61943eef9", new TestWebRequestCreate());

                TestWebRequestCreate.MockHttpWebRequestWithGivenResponseCode(HttpStatusCode.OK,
                                                                             "{\"total\":1,\"start\":0,\"end\":0,\"page\":1,\"numPages\":1,\"pageSize\":20,\"nextPageUri\":null,\"recordings\":[{\"uri\":\"/Accounts/ACabe7063197551fe51671f9ac3a9708e9dad51c4d/Recordings/REb1eecfce410141ad1749c0fc84dfbb6fc4c2a815\",\"revision\":1,\"dateCreated\":\"Mon, 27 Jun 2016 17:53:55 GMT\",\"dateUpdated\":\"Mon, 27 Jun 2016 17:53:55 GMT\",\"recordingId\":\"REb1eecfce410141ad1749c0fc84dfbb6fc4c2a815\",\"accountId\":\"ACabe7063197551fe51671f9ac3a9708e9dad51c4d\",\"callId\":\"CF3cb8a52f461bcf64cbd3111d9492c3f61943eef9\",\"duration\":9}]}");

                RecordingsSearchFilters filters = new RecordingsSearchFilters();
                filters.setCallId("CF3cb8a52f461bcf64cbd3111d9492c3f61943eef9");
                RecordingList recordingList = recordingsRequester.getMeta(filters);

                Assert.IsNotNull(recordingList);

                Assert.AreEqual(recordingList.getLocalSize, 1);
                Assert.AreEqual((recordingList.export()).Count, 1);

                Recording recording = recordingList.get(0) as Recording;

                Assert.IsNotNull(recording);
                Assert.AreEqual(recording.getRecordingId, "REb1eecfce410141ad1749c0fc84dfbb6fc4c2a815");
            }
            catch (PersyException pe)
            {
                Assert.Fail(pe.Message);
            }
        }

        [TestMethod]
        public void GetRecordingListByDateTest()
        {
            try
            {
                RecordingsRequester recordingsRequester = new RecordingsRequester("AC736ca2078721a9a41fb47f07bf40d9e21cb304da", "8e3d1c1c519fc761856f8cc825bcfea94d8c58b5", "AC736ca2078721a9a41fb47f07bf40d9e21cb304da");

                Type type = typeof(APIRequester);
                FieldInfo fieldInfo = type.GetField("persyUrl", BindingFlags.NonPublic | BindingFlags.Instance);
                if (fieldInfo != null)
                {
                    fieldInfo.SetValue(recordingsRequester, "http://GetRecordingListTest:3000");
                }

                WebRequest.RegisterPrefix("http://GetRecordingListTest:3000/Accounts/AC736ca2078721a9a41fb47f07bf40d9e21cb304da/Recordings?dateCreate=2016-05-27", new TestWebRequestCreate());

                TestWebRequestCreate.MockHttpWebRequestWithGivenResponseCode(HttpStatusCode.OK,
                                                                             "{\"total\":1,\"start\":0,\"end\":0,\"page\":1,\"numPages\":1,\"pageSize\":20,\"nextPageUri\":null,\"recordings\":[{\"uri\":\"/Accounts/ACabe7063197551fe51671f9ac3a9708e9dad51c4d/Recordings/REb1eecfce410141ad1749c0fc84dfbb6fc4c2a815\",\"revision\":1,\"dateCreated\":\"Mon, 27 Jun 2016 17:53:55 GMT\",\"dateUpdated\":\"Mon, 27 Jun 2016 17:53:55 GMT\",\"recordingId\":\"REb1eecfce410141ad1749c0fc84dfbb6fc4c2a815\",\"accountId\":\"ACabe7063197551fe51671f9ac3a9708e9dad51c4d\",\"callId\":\"CF3cb8a52f461bcf64cbd3111d9492c3f61943eef9\",\"duration\":9}]}");

                RecordingsSearchFilters filters = new RecordingsSearchFilters();
                filters.setDateCreated(new Date(2016, 5, 27));
                RecordingList recordingList = recordingsRequester.getMeta(filters);

                Assert.IsNotNull(recordingList);

                Assert.AreEqual(recordingList.getLocalSize, 1);
                Assert.AreEqual((recordingList.export()).Count, 1);

                Recording recording = recordingList.get(0) as Recording;

                Assert.IsNotNull(recording);
                Assert.AreEqual(recording.getRecordingId, "REb1eecfce410141ad1749c0fc84dfbb6fc4c2a815");
            }
            catch (PersyException pe)
            {
                Assert.Fail(pe.Message);
            }
        }

        [TestMethod]
        public void GetRecordingListByDateAndCallIdTest()
        {
            try
            {
                RecordingsRequester recordingsRequester = new RecordingsRequester("AC736ca2078721a9a41fb47f07bf40d9e21cb304da", "8e3d1c1c519fc761856f8cc825bcfea94d8c58b5", "AC736ca2078721a9a41fb47f07bf40d9e21cb304da");

                Type type = typeof(APIRequester);
                FieldInfo fieldInfo = type.GetField("persyUrl", BindingFlags.NonPublic | BindingFlags.Instance);
                if (fieldInfo != null)
                {
                    fieldInfo.SetValue(recordingsRequester, "http://GetRecordingListTest:3000");
                }

                WebRequest.RegisterPrefix("http://GetRecordingListTest:3000/Accounts/AC736ca2078721a9a41fb47f07bf40d9e21cb304da/Recordings?dateCreate=2016-05-27&callId=CF3cb8a52f461bcf64cbd3111d9492c3f61943eef9", new TestWebRequestCreate());

                TestWebRequestCreate.MockHttpWebRequestWithGivenResponseCode(HttpStatusCode.OK,
                                                                             "{\"total\":1,\"start\":0,\"end\":0,\"page\":1,\"numPages\":1,\"pageSize\":20,\"nextPageUri\":null,\"recordings\":[{\"uri\":\"/Accounts/ACabe7063197551fe51671f9ac3a9708e9dad51c4d/Recordings/REb1eecfce410141ad1749c0fc84dfbb6fc4c2a815\",\"revision\":1,\"dateCreated\":\"Mon, 27 Jun 2016 17:53:55 GMT\",\"dateUpdated\":\"Mon, 27 Jun 2016 17:53:55 GMT\",\"recordingId\":\"REb1eecfce410141ad1749c0fc84dfbb6fc4c2a815\",\"accountId\":\"ACabe7063197551fe51671f9ac3a9708e9dad51c4d\",\"callId\":\"CF3cb8a52f461bcf64cbd3111d9492c3f61943eef9\",\"duration\":9}]}");

                RecordingsSearchFilters filters = new RecordingsSearchFilters();
                filters.setDateCreated(new Date(2016, 5, 27));
                RecordingList recordingList = recordingsRequester.getMeta(filters);

                Assert.IsNotNull(recordingList);

                Assert.AreEqual(recordingList.getLocalSize, 1);
                Assert.AreEqual((recordingList.export()).Count, 1);

                Recording recording = recordingList.get(0) as Recording;

                Assert.IsNotNull(recording);
                Assert.AreEqual(recording.getRecordingId, "REb1eecfce410141ad1749c0fc84dfbb6fc4c2a815");
            }
            catch (PersyException pe)
            {
                Assert.Fail(pe.Message);
            }
        }

        [TestMethod]
        public void GetRecordingMetaTest()
        {
            try
            {
                RecordingsRequester recordingsRequester = new RecordingsRequester("ACabe7063197551fe51671f9ac3a9708e9dad51c4d", "204c15aae7a486c42776aea4dbafe8c68a773071", "ACabe7063197551fe51671f9ac3a9708e9dad51c4d");

                Type type = typeof(APIRequester);
                FieldInfo fieldInfo = type.GetField("persyUrl", BindingFlags.NonPublic | BindingFlags.Instance);
                if (fieldInfo != null)
                {
                    fieldInfo.SetValue(recordingsRequester, "http://GetRecordingMetaTest:3000");
                }

                WebRequest.RegisterPrefix("http://GetRecordingMetaTest:3000", new TestWebRequestCreate());

                TestWebRequestCreate.MockHttpWebRequestWithGivenResponseCode(HttpStatusCode.OK,
                                                                             "{\"uri\" : \"/Accounts/ACabe7063197551fe51671f9ac3a9708e9dad51c4d/Recordings/REb1eecfce410141ad1749c0fc84dfbb6fc4c2a810\", \"revision\" : 1, \"dateCreated\" : \"Mon, 27 Jun 2016 17:53:55 GMT\", \"dateUpdated\" : \"Mon, 27 Jun 2016 17:53:55 GMT\", \"recordingId\" : \"REb1eecfce410141ad1749c0fc84dfbb6fc4c2a810\", \"accountId\" : \"ACabe7063197551fe51671f9ac3a9708e9dad51c4d\", \"conferenceId\" : \"CF3cb8a52f461bcf64cbd3111d9492c3f61943eef9\", \"duration\" : 9}");

                Recording recording = recordingsRequester.getMetaByRecordingId("REb1eecfce410141ad1749c0fc84dfbb6fc4c2a810");

                Assert.IsNotNull(recording);
                Assert.AreEqual(recording.getRecordingId, "REb1eecfce410141ad1749c0fc84dfbb6fc4c2a810");
            }
            catch (PersyException pe)
            {
                Assert.Fail(pe.Message);
            }
        }

        [TestMethod]
        public void DeleteRecordingTest()
        {
            try
            {
                RecordingsRequester recordingsRequester = new RecordingsRequester("ACabe7063197551fe51671f9ac3a9708e9dad51c4d", "204c15aae7a486c42776aea4dbafe8c68a773071", "ACabe7063197551fe51671f9ac3a9708e9dad51c4d");

                Type type = typeof(APIRequester);
                FieldInfo fieldInfo = type.GetField("persyUrl", BindingFlags.NonPublic | BindingFlags.Instance);
                if (fieldInfo != null)
                {
                    fieldInfo.SetValue(recordingsRequester, "http://DeleteRecordingTest:3000");
                }

                WebRequest.RegisterPrefix("http://DeleteRecordingTest:3000", new TestWebRequestCreate());

                TestWebRequestCreate.MockHttpWebRequestWithGivenResponseCode(HttpStatusCode.OK);

                recordingsRequester.delete("REb1eecfce410141ad1749c0fc84dfbb6fc4c2a810");
            }
            catch (PersyException pe)
            {
                Assert.Fail(pe.Message);
            }
        }

        [TestMethod]
        public void GetRecordingDownloadTest()
        {
            try
            {
                RecordingsRequester recordingsRequester = new RecordingsRequester("ACabe7063197551fe51671f9ac3a9708e9dad51c4d", "204c15aae7a486c42776aea4dbafe8c68a773071", "ACabe7063197551fe51671f9ac3a9708e9dad51c4d");

                Type type = typeof(APIRequester);
                FieldInfo fieldInfo = type.GetField("persyUrl", BindingFlags.NonPublic | BindingFlags.Instance);
                if (fieldInfo != null)
                {
                    fieldInfo.SetValue(recordingsRequester, "http://GetRecordingDownloadTest:3000");
                }

                WebRequest.RegisterPrefix("http://GetRecordingDownloadTest:3000", new TestWebRequestCreate());

                byte[] rawWav = { 0x52, 0x49, 0x46, 0x46, 0x84, 0x0a, 0x00, 0x00, 0x57, 0x41, 0x56, 0x45, 0x66, 0x6d, 0x74, 0x20, 0x10, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01, 0x00, 0x40, 0x1f, 0x00, 0x00, 0x80, 0x3e, 0x00, 0x00, 0x02, 0x00, 0x10, 0x00, 0x64, 0x61, 0x74, 0x61, 0x60, 0x0a, 0x00, 0x00, 0xf8, 0xff, 0xf0, 0xff, 0xf1, 0xff, 0xf5, 0xff, 0xfc, 0xff, 0xf3, 0xff, 0xf6, 0xff, 0xe3, 0xff, 0xea, 0xff, 0xf0, 0xff, 0xf7, 0xff, 0xf9, 0xff, 0xf7, 0xff, 0xf8, 0xff, 0xf9, 0xff, 0xf7, 0xff, 0xf1, 0xff, 0xef, 0xff, 0xe8, 0xff, 0xf8, 0xff, 0x01, 0x00, 0x07, 0x00, 0x11, 0x00, 0x07, 0x00, 0x08, 0x00, 0x08, 0x00, 0x01, 0x00, 0xf7, 0xff, 0xf9, 0xff, 0xee, 0xff, 0xf1, 0xff, 0xf8, 0xff, 0x08, 0x00, 0x08, 0x00, 0xf8, 0xff, 0xff, 0xff, 0xf9, 0xff, 0x00, 0x00, 0x07, 0x00, 0x0a, 0x00, 0x05, 0x00, 0x03, 0x00, 0x06, 0x00, 0x09, 0x00, 0xff, 0xff, 0x01, 0x00, 0x07, 0x00, 0x09, 0x00, 0xff, 0xff, 0xf9, 0xff, 0xef, 0xff, 0xf9, 0xff, 0xf8, 0xff, 0xff, 0xff, 0x02, 0x00, 0xf5, 0xff, 0x02, 0x00, 0xf8, 0xff, 0xf0, 0xff, 0xe8, 0xff, 0xe7, 0xff, 0xf8, 0xff, 0x01, 0x00, 0xf8, 0xff, 0xef, 0xff, 0xf1, 0xff, 0xe7, 0xff, 0xe0, 0xff, 0xd9, 0xff, 0xd7, 0xff, 0xd9, 0xff, 0xd8, 0xff, 0xe6, 0xff, 0xf2, 0xff, 0xef, 0xff, 0xf8, 0xff, 0x09, 0x00, 0x06, 0x00, 0x0b, 0x00, 0x0c, 0x00, 0x13, 0x00, 0x06, 0x00, 0x00, 0x00, 0x0b, 0x00, 0x04, 0x00, 0x0b, 0x00, 0x0e, 0x00, 0x10, 0x00, 0x11, 0x00, 0x10, 0x00, 0x1f, 0x00, 0x22, 0x00, 0x15, 0x00, 0x13, 0x00, 0xfe, 0xff, 0x02, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x06, 0x00, 0x01, 0x00, 0xf9, 0xff, 0xf5, 0xff, 0xf3, 0xff, 0xe5, 0xff, 0xf4, 0xff, 0xf5, 0xff, 0xf9, 0xff, 0xf8, 0xff, 0xf7, 0xff, 0x0a, 0x00, 0x07, 0x00, 0x10, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x10, 0x00, 0x09, 0x00, 0x07, 0x00, 0x0f, 0x00, 0x12, 0x00, 0x0e, 0x00, 0xf2, 0xff, 0xdf, 0xff, 0xbf, 0xff, 0xda, 0xff, 0xe6, 0xff, 0xf2, 0xff, 0x07, 0x00, 0x17, 0x00, 0x12, 0x00, 0x16, 0x00, 0x1a, 0x00, 0x0f, 0x00, 0x08, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xda, 0xff, 0xd6, 0xff, 0xda, 0xff, 0xdd, 0xff, 0xf3, 0xff, 0xd5, 0xff, 0x13, 0x00, 0x45, 0x00, 0x42, 0x00, 0x48, 0x00, 0x47, 0x00, 0x31, 0x00, 0x27, 0x00, 0x11, 0x00, 0x18, 0x00, 0x10, 0x00, 0x20, 0x00, 0x40, 0x00, 0x48, 0x00, 0x37, 0x00, 0x1a, 0x00, 0xfe, 0xff, 0xda, 0xff, 0x9e, 0xff, 0x89, 0xff, 0x87, 0xff, 0x8a, 0xff, 0x9e, 0xff, 0xb9, 0xff, 0xb0, 0xff, 0xcf, 0xff, 0xea, 0xff, 0xce, 0xff, 0xda, 0xff, 0xce, 0xff, 0xc2, 0xff, 0xd6, 0xff, 0xf2, 0xff, 0xef, 0xff, 0x0f, 0x00, 0x33, 0x00, 0x4d, 0x00, 0x52, 0x00, 0x37, 0x00, 0x27, 0x00, 0x1a, 0x00, 0xef, 0xff, 0xd0, 0xff, 0x09, 0x00, 0x1e, 0x00, 0x62, 0x00, 0xa3, 0x00, 0xe4, 0x00, 0x14, 0x01, 0x04, 0x01, 0x15, 0x01, 0x23, 0x01, 0x14, 0x01, 0xe4, 0x00, 0xe3, 0x00, 0xc7, 0x00, 0x81, 0x00, 0x42, 0x00, 0xf6, 0xff, 0xa2, 0xff, 0x4a, 0xff, 0xff, 0xfe, 0xb8, 0xfe, 0x79, 0xfe, 0x4f, 0xfe, 0xf9, 0xfd, 0xef, 0xfd, 0xb8, 0xfd, 0xb2, 0xfd, 0x54, 0xfd, 0xf6, 0xfc, 0x52, 0xfd, 0x95, 0xfd, 0x14, 0xfe, 0xdb, 0xfe, 0x6d, 0xff, 0x68, 0x00, 0x53, 0x01, 0xad, 0x01, 0x0c, 0x02, 0x6a, 0x02, 0x70, 0x02, 0x47, 0x02, 0x90, 0x02, 0x69, 0x02, 0x8e, 0x02, 0xcb, 0x02, 0xcd, 0x02, 0xca, 0x02, 0xce, 0x02, 0x4b, 0x02, 0xac, 0x02, 0x9d, 0x03, 0x1b, 0x04, 0x5c, 0x04, 0x1d, 0x05, 0xdb, 0x04, 0x5d, 0x04, 0x1c, 0x04, 0xcb, 0x01, 0xd1, 0xff, 0x54, 0xfd, 0xe3, 0xfa, 0xa5, 0xf8, 0xc4, 0xf6, 0xc4, 0xf4, 0x44, 0xf3, 0x44, 0xf3, 0x43, 0xf2, 0xc6, 0xf2, 0x42, 0xf5, 0x46, 0xf6, 0x63, 0xf9, 0x24, 0xfc, 0xbc, 0xfe, 0x74, 0x01, 0x5b, 0x04, 0x1f, 0x06, 0x58, 0x07, 0x40, 0x08, 0x38, 0x09, 0x3f, 0x0a, 0xbb, 0x09, 0xbc, 0x07, 0xdc, 0x06, 0x5c, 0x07, 0x9b, 0x06, 0xde, 0x05, 0x1a, 0x05, 0x1e, 0x04, 0x1a, 0x04, 0x9d, 0x06, 0x3c, 0x08, 0xdb, 0x06, 0x5e, 0x07, 0xba, 0x07, 0xbe, 0x07, 0x5a, 0x06, 0x9d, 0x03, 0x8c, 0xfe, 0x24, 0xfa, 0x45, 0xf7, 0xc2, 0xf0, 0x06, 0xec, 0x02, 0xea, 0x06, 0xe5, 0x02, 0xe7, 0x06, 0xe9, 0x02, 0xec, 0xc6, 0xf0, 0x42, 0xf5, 0xa6, 0xf9, 0x1e, 0x00, 0x9d, 0x05, 0xbc, 0x08, 0x3b, 0x0b, 0x3e, 0x0c, 0x3a, 0x0d, 0x3d, 0x0e, 0x3c, 0x0e, 0xbc, 0x0c, 0xbc, 0x0b, 0xbc, 0x0a, 0xbc, 0x09, 0xbb, 0x09, 0x3e, 0x09, 0x9b, 0x06, 0x1d, 0x05, 0xca, 0x01, 0x9e, 0xfe, 0xb9, 0xfe, 0xf9, 0xfc, 0x5f, 0xf9, 0x48, 0xf8, 0xc1, 0xf7, 0x25, 0xf9, 0xfc, 0xfe, 0xcd, 0x02, 0x8a, 0x02, 0x5f, 0x05, 0x38, 0x09, 0xc0, 0x0a, 0x38, 0x0d, 0x40, 0x0b, 0x98, 0x04, 0x64, 0x00, 0x51, 0xfe, 0x26, 0xf9, 0x42, 0xf5, 0xc5, 0xf0, 0x04, 0xec, 0x04, 0xed, 0x44, 0xf2, 0x44, 0xf4, 0xc3, 0xf6, 0xe6, 0xf9, 0x62, 0xfa, 0xcd, 0xfe, 0xdc, 0x03, 0xdb, 0x03, 0x6e, 0x02, 0xea, 0x02, 0x2e, 0x03, 0x1a, 0x04, 0x5d, 0x05, 0xdc, 0x03, 0xcc, 0x02, 0xdc, 0x03, 0x5c, 0x05, 0xbc, 0x07, 0xbc, 0x07, 0xdc, 0x05, 0x2c, 0x03, 0xe1, 0xff, 0xa5, 0xff, 0xd8, 0x00, 0x70, 0xfd, 0x28, 0xf9, 0x41, 0xf8, 0x45, 0xf7, 0x94, 0xfc, 0x1c, 0x05, 0x9b, 0x05, 0x4e, 0x03, 0xb9, 0x08, 0x40, 0x0d, 0x38, 0x0f, 0x00, 0x14, 0xb8, 0x0e, 0xaf, 0x02, 0xca, 0xfe, 0xf6, 0xfd, 0x43, 0xf7, 0xc4, 0xf2, 0x04, 0xee, 0x03, 0xe6, 0x06, 0xe9, 0xc2, 0xf1, 0x46, 0xf4, 0x41, 0xf7, 0x67, 0xfa, 0xe1, 0xf8, 0x20, 0xff, 0x18, 0x07, 0xde, 0x05, 0x6b, 0x03, 0xcc, 0x02, 0x8e, 0x01, 0x59, 0x05, 0xbf, 0x09, 0x59, 0x06, 0x1f, 0x04, 0x59, 0x05, 0xde, 0x05, 0xbb, 0x08, 0x3c, 0x0b, 0xdd, 0x06, 0xab, 0x02, 0x00, 0x00, 0x95, 0xfd, 0x5a, 0xff, 0xdd, 0xfe, 0xa5, 0xf8, 0x42, 0xf6, 0xc6, 0xf5, 0xa3, 0xf8, 0x0c, 0x03, 0x3c, 0x0a, 0x5d, 0x05, 0x39, 0x08, 0x00, 0x12, 0xf9, 0x11, 0xfe, 0x17, 0xfa, 0x19, 0x3e, 0x09, 0x72, 0xfe, 0x8a, 0xff, 0x42, 0xf8, 0x05, 0xf0, 0x04, 0xec, 0x05, 0xe2, 0x83, 0xdd, 0x03, 0xea, 0x06, 0xf0, 0x02, 0xf0, 0x46, 0xf5, 0x42, 0xf5, 0xa6, 0xf8, 0x5b, 0x04, 0xbc, 0x07, 0x1d, 0x05, 0x59, 0x05, 0x0f, 0x03, 0x5a, 0x05, 0xbe, 0x0c, 0x3a, 0x0c, 0x3e, 0x09, 0xb9, 0x09, 0xbf, 0x08, 0x3a, 0x0a, 0x3e, 0x0e, 0x39, 0x0b, 0xa0, 0x04, 0x80, 0x00, 0xa8, 0xfb, 0xe0, 0xfb, 0xf8, 0xfd, 0x41, 0xf8, 0x46, 0xf3, 0xc3, 0xf2, 0xc4, 0xf4, 0xed, 0x01, 0xbb, 0x0d, 0x3c, 0x08, 0xbc, 0x09, 0xfd, 0x14, 0xfb, 0x15, 0xfc, 0x1a, 0xfc, 0x1e, 0xbc, 0x09, 0xe5, 0xfa, 0x0b, 0xff, 0x45, 0xf6, 0x02, 0xeb, 0x07, 0xea, 0x81, 0xdd, 0x87, 0xd7, 0x01, 0xe8, 0x07, 0xed, 0x02, 0xee, 0x45, 0xf7, 0x44, 0xf5, 0xc2, 0xf7, 0x20, 0x07, 0xb8, 0x09, 0xbf, 0x07, 0xbb, 0x08, 0x8b, 0x02, 0x9e, 0x03, 0xba, 0x0c, 0xbd, 0x0a, 0x1c, 0x07, 0x5b, 0x07, 0x9d, 0x04, 0xbd, 0x07, 0x39, 0x0f, 0xc0, 0x0c, 0x57, 0x07, 0x71, 0x03, 0xf1, 0xfd, 0x6d, 0xff, 0x8c, 0x02, 0x63, 0xfb, 0xc6, 0xf5, 0xc2, 0xf2, 0x06, 0xf0, 0xea, 0xfe, 0x3d, 0x0e, 0xdc, 0x05, 0x9c, 0x06, 0xfc, 0x16, 0xfc, 0x13, 0xfb, 0x18, 0x7e, 0x20, 0xba, 0x09, 0x45, 0xf8, 0x0c, 0x02, 0x43, 0xf6, 0x05, 0xe9, 0x04, 0xed, 0x83, 0xdd, 0x86, 0xd3, 0x02, 0xea, 0x05, 0xee, 0x04, 0xee, 0x64, 0xfb, 0x44, 0xf7, 0xc4, 0xf5, 0x3c, 0x08, 0xbc, 0x09, 0x1d, 0x06, 0xba, 0x0a, 0xee, 0x02, 0x56, 0x00, 0x3e, 0x0c, 0xbb, 0x0a, 0x5b, 0x06, 0xbf, 0x08, 0xd8, 0x03, 0x1f, 0x05, 0xba, 0x0e, 0xbd, 0x0c, 0x5c, 0x07, 0x9c, 0x04, 0xd3, 0xfd, 0xcd, 0xfe, 0x8b, 0x02, 0xe6, 0xfb, 0x41, 0xf7, 0x48, 0xf4, 0xff, 0xee, 0x01, 0xff, 0xb9, 0x0d, 0x1d, 0x05, 0x3d, 0x08, 0xfa, 0x17, 0xfe, 0x12, 0xfb, 0x18, 0x7c, 0x24, 0xbc, 0x08, 0x24, 0xfa, 0x5c, 0x04, 0x45, 0xf4, 0x01, 0xe6, 0x08, 0xed, 0x80, 0xdd, 0x87, 0xd3, 0x03, 0xea, 0x03, 0xea, 0x05, 0xea, 0x24, 0xfc, 0x44, 0xf7, 0x44, 0xf6, 0xbb, 0x09, 0x3d, 0x08, 0x9a, 0x05, 0x00, 0x10, 0x97, 0x05, 0xf8, 0x00, 0xb9, 0x0e, 0xbe, 0x0a, 0x9b, 0x05, 0xbc, 0x0c, 0x9d, 0x04, 0x2a, 0x02, 0xbf, 0x0e, 0xb8, 0x0b, 0xe0, 0x06, 0x39, 0x09, 0x36, 0xfe, 0xe3, 0xfa, 0x8c, 0x01, 0x24, 0xfb, 0x44, 0xf7, 0x44, 0xf5, 0x04, 0xed, 0x44, 0xf8, 0x3c, 0x0c, 0x9c, 0x05, 0x5b, 0x06, 0xfe, 0x17, 0xfa, 0x12, 0xfe, 0x16, 0x7a, 0x24, 0xfd, 0x0f, 0x64, 0xfb, 0xdc, 0x06, 0xe4, 0xf8, 0x04, 0xe6, 0x04, 0xec, 0x84, 0xdf, 0x83, 0xd3, 0x06, 0xe9, 0x02, 0xe9, 0x05, 0xe4, 0xa4, 0xf9, 0xe3, 0xf9, 0x45, 0xf5, 0x9c, 0x06, 0x5b, 0x05, 0x0d, 0x02, 0xfc, 0x0f, 0xbb, 0x09, 0xc9, 0xff, 0xbc, 0x0a, 0xbb, 0x0a, 0x1e, 0x07, 0xba, 0x0d, 0xbd, 0x07, 0x9c, 0x03, 0x3b, 0x0d, 0xbd, 0x0b, 0xbc, 0x07, 0x3c, 0x09, 0x9b, 0xfe, 0x66, 0xfa, 0xe9, 0xfe, 0x47, 0xf8, 0x43, 0xf6, 0xc3, 0xf5, 0x06, 0xec, 0x42, 0xf7, 0xbe, 0x0c, 0x3b, 0x0a, 0xbc, 0x09, 0xfc, 0x18, 0xfd, 0x16, 0xfa, 0x12, 0xff, 0x1e, 0x39, 0x0f, 0x66, 0xf9, 0x97, 0xff, 0xe5, 0xf8, 0x02, 0xe9, 0x06, 0xe8, 0x03, 0xe3, 0x05, 0xe1, 0x03, 0xed, 0x04, 0xec, 0x44, 0xf1, 0xb5, 0x00, 0x63, 0xfb, 0x45, 0xf8, 0xf7, 0xff, 0x8d, 0xfe, 0x5b, 0x04, 0x3c, 0x0b, 0xcd, 0x01, 0x2b, 0xff, 0x3e, 0x09, 0xb9, 0x0d, 0xbf, 0x0e, 0x38, 0x0c, 0xc0, 0x07, 0xba, 0x0c, 0xfd, 0x0f, 0xbb, 0x09, 0x1d, 0x07, 0x3a, 0x0a, 0xdf, 0x06, 0x41, 0xf3, 0x07, 0xe6, 0x02, 0xee, 0x45, 0xf4, 0x03, 0xe8, 0x85, 0xdd, 0xc3, 0xf4, 0x7e, 0x30, 0x79, 0x45, 0x7e, 0x20, 0xfc, 0x1b, 0xfa, 0x1d, 0xff, 0x13, 0xf9, 0x0f, 0x06, 0xe6, 0x83, 0xbe, 0x84, 0xdb, 0x05, 0xea, 0x82, 0xd9, 0x06, 0xe6, 0x03, 0xef, 0xc4, 0xf7, 0xfe, 0x13, 0xf8, 0x11, 0xf8, 0x00, 0xb9, 0x07, 0x3e, 0x09, 0x5c, 0x05, 0xab, 0x01, 0x04, 0xf0, 0x05, 0xee, 0x22, 0xfc, 0x27, 0xfb, 0xe1, 0xfa, 0xae, 0x02, 0x83, 0x00, 0xbd, 0x07, 0xfa, 0x12, 0x3f, 0x0b, 0xb9, 0x07, 0xbf, 0x0c, 0x5a, 0x07, 0x9d, 0x04, 0x1b, 0x04, 0xa6, 0xf8, 0x22, 0xfa, 0xa2, 0xff, 0xc2, 0xf0, 0x06, 0xec, 0x43, 0xf5, 0x44, 0xf6, 0xe4, 0xf9, 0xa1, 0xff, 0x2a, 0x03, 0xfe, 0x1e, 0x7b, 0x32, 0xfb, 0x18, 0xff, 0x0f, 0xf8, 0x1c, 0x40, 0x09, 0x40, 0xf8, 0x08, 0xee, 0x80, 0xd1, 0x87, 0xd7, 0x43, 0xf2, 0x84, 0xdf, 0x04, 0xe7, 0x3c, 0x0a, 0xfc, 0x10, 0xfd, 0x15, 0xfa, 0x1d, 0x3f, 0x0f, 0xf9, 0x0f, 0x3f, 0x0f, 0xc1, 0xf3, 0x07, 0xf0, 0x41, 0xf4, 0x07, 0xe9, 0xc1, 0xf0, 0x46, 0xf8, 0xe4, 0xf9, 0xbb, 0x0d, 0xfc, 0x12, 0xbc, 0x07, 0xfd, 0x10, 0xfb, 0x13, 0x5e, 0x06, 0xd8, 0x05, 0xb8, 0xfd, 0x41, 0xf7, 0x6f, 0x02, 0xe2, 0xfa, 0x05, 0xf0, 0x23, 0xfb, 0xc5, 0xf6, 0x03, 0xee, 0xa5, 0xf8, 0x44, 0xf8, 0xa3, 0xf9, 0x9d, 0x04, 0x0b, 0x03, 0xfd, 0x11, 0x7b, 0x30, 0x7c, 0x20, 0x1d, 0x04, 0xfa, 0x16, 0xfe, 0x10, 0x03, 0xed, 0x03, 0xe8, 0x86, 0xd7, 0x82, 0xd1, 0x05, 0xef, 0x04, 0xe6, 0x04, 0xe5, 0xfb, 0x13, 0xfd, 0x1a, 0x3c, 0x0d, 0xfb, 0x19, 0xfe, 0x14, 0xba, 0x09, 0x6d, 0x02, 0x04, 0xeb, 0x04, 0xeb, 0x43, 0xf7, 0x06, 0xed, 0x02, 0xed, 0x85, 0x00, 0x5b, 0x07, 0x3e, 0x0c, 0xf9, 0x0f, 0xbf, 0x09, 0x3a, 0x0e, 0xfc, 0x10, 0x35, 0x01, 0x63, 0xfb, 0x14, 0xfd, 0x65, 0xfa, 0x64, 0xfb, 0x62, 0xf9, 0x27, 0xf9, 0xb0, 0x00, 0x18, 0xfe, 0xa2, 0xf8, 0x24, 0xfc, 0x55, 0xfd, 0x52, 0xfe, 0xee, 0xfe, 0xe3, 0xfa, 0xdd, 0x06, 0x7a, 0x20, 0x7e, 0x22, 0x9a, 0x05, 0xfe, 0x0f, 0xfb, 0x1d, 0x44, 0xf7, 0x05, 0xe6, 0x02, 0xe8, 0x87, 0xdd, 0x00, 0xea, 0x09, 0xed, 0x00, 0xe7, 0x3e, 0x0d, 0xfc, 0x1b, 0x3a, 0x08, 0xff, 0x14, 0xfa, 0x1d, 0x3d, 0x09, 0xe3, 0xf9, 0x05, 0xf0, 0x03, 0xf0, 0x45, 0xf5, 0x03, 0xea, 0x05, 0xeb, 0x1b, 0x06, 0x3d, 0x0b, 0x1b, 0x05, 0xbc, 0x0e, 0xfd, 0x12, 0xbb, 0x0d, 0xbc, 0x07, 0x5c, 0xff, 0x55, 0xfe, 0x12, 0xfd, 0x46, 0xf6, 0x42, 0xf8, 0xf5, 0xfd, 0x14, 0xfd, 0x64, 0xfc, 0x1b, 0xff, 0x16, 0xfe, 0x62, 0xfb, 0xe5, 0xf9, 0xa4, 0xfb, 0x13, 0xfe, 0xa6, 0xfa, 0x96, 0xff, 0xfe, 0x1b, 0x7b, 0x26, 0xbc, 0x0a, 0x3c, 0x0b, 0xfc, 0x1e, 0x7c, 0xff, 0x04, 0xe6, 0x05, 0xe8, 0x83, 0xdb, 0x04, 0xe7, 0x05, 0xf0, 0x02, 0xe7, 0xdf, 0x05, 0xf9, 0x1a, 0xbf, 0x09, 0xf9, 0x12, 0xff, 0x19, 0x99, 0x06, 0x96, 0xfc, 0x43, 0xf3, 0x05, 0xee, 0x43, 0xf2, 0x04, 0xee, 0x04, 0xef, 0x9d, 0x03, 0x3b, 0x08, 0x1c, 0x07, 0xfc, 0x13, 0xfc, 0x12, 0xbd, 0x0b, 0x3a, 0x09, 0x6e, 0x02, 0xf2, 0xfd, 0xe7, 0xf9, 0xc1, 0xf4, 0xa5, 0xf9, 0x65, 0xfb, 0xa1, 0xfb, 0x3a, 0xfd, 0x51, 0x00, 0xf2, 0xfe, 0x9f, 0xfa, 0xa7, 0xfa, 0x33, 0xfe, 0x95, 0xfc, 0x23, 0xf9, 0xfd, 0xfe, 0xfb, 0x14, 0x7c, 0x26, 0xfd, 0x10, 0x3b, 0x08, 0x7d, 0x20, 0x3b, 0x09, 0x05, 0xe7, 0x03, 0xeb, 0x05, 0xe4, 0x03, 0xe3, 0x04, 0xef, 0x04, 0xea, 0x75, 0xfe, 0xfb, 0x15, 0x3d, 0x09, 0xfb, 0x10, 0xfc, 0x19, 0x9d, 0x06, 0xf3, 0xfd, 0xe5, 0xf8, 0x04, 0xf0, 0xc2, 0xf1, 0x07, 0xef, 0xc1, 0xf0, 0xe7, 0x00, 0x69, 0x03, 0xde, 0x03, 0xfa, 0x10, 0xfe, 0x10, 0xbb, 0x0b, 0x3c, 0x0c, 0xdc, 0x05, 0x6c, 0x02, 0xf3, 0xfc, 0xc6, 0xf6, 0xd2, 0xfc, 0xa6, 0xfa, 0xc3, 0xf6, 0x92, 0xfc, 0x18, 0xfd, 0x60, 0xfa, 0x27, 0xf9, 0xe3, 0xf8, 0x33, 0xfd, 0x65, 0xfc, 0xe4, 0xf8, 0x6c, 0x02, 0xfc, 0x16, 0x7c, 0x24, 0xfb, 0x12, 0x3e, 0x0c, 0xfa, 0x1e, 0x9e, 0x03, 0x02, 0xe8, 0x05, 0xf0, 0x84, 0xdf, 0x05, 0xe2, 0x01, 0xf0, 0x08, 0xe7, 0x47, 0xff, 0x01, 0x12, 0x59, 0x04, 0xfe, 0x11, 0xfa, 0x17, 0x54, 0x01, 0x42, 0x00, 0x61, 0xfa, 0x08, 0xf0, 0xc0, 0xf3, 0xc7, 0xf0, 0xc1, 0xf3, 0xd0, 0x02, 0x50, 0x01, 0x60, 0x05, 0xf9, 0x10, 0xbd, 0x0b, 0x3c, 0x0a, 0x3c, 0x0c, 0x1c, 0x05, 0x4d, 0x03, 0x72, 0xfd, 0x45, 0xf8, 0x34, 0xfe, 0xa3, 0xfa, 0x46, 0xf8, 0xfa, 0xfe, 0x65, 0xfc, 0x23, 0xfb, 0xe5, 0xfa, 0x64, 0xf9, 0xf4, 0xfc, 0x23, 0xfb, 0x44, 0xf8, 0x1e, 0x04, 0xf9, 0x17, 0x80, 0x20, 0xb8, 0x0e, 0xff, 0x0f, 0x7a, 0x20, 0x3d, 0xff, 0x04, 0xec, 0x44, 0xf3, 0x84, 0xdf, 0x04, 0xe6, 0x04, 0xee, 0x04, 0xe7, 0x2c, 0x02, 0xbc, 0x0e, 0x2c, 0x03, 0xfc, 0x14, 0xfc, 0x13, 0x43, 0x01, 0x6e, 0x02, 0x42, 0xf8, 0x06, 0xf0, 0xc2, 0xf5, 0x05, 0xef, 0xc4, 0xf4, 0xac, 0x01, 0x4b, 0xff, 0x5e, 0x06, 0x3a, 0x0f, 0xbe, 0x0a, 0x3a, 0x0d, 0xbd, 0x0c, 0xdc, 0x03, 0xdb, 0x03, 0xf6, 0xfd, 0x41, 0xf8, 0x97, 0xfd, 0xa3, 0xf9, 0x23, 0xfa, 0xd2, 0xff, 0x11, 0xfd, 0x66, 0xfc, 0xa5, 0xfa, 0x61, 0xf9, 0x38, 0xfd, 0x9f, 0xf9, 0x49, 0xf6, 0x49, 0x02, 0xfd, 0x15, 0x7c, 0x20, 0xfb, 0x0f, 0xfe, 0x10, 0x7a, 0x20, 0x8e, 0x01, 0xc2, 0xf0, 0xc5, 0xf3, 0x04, 0xe2, 0x03, 0xe8, 0x06, 0xee, 0x02, 0xe6, 0x39, 0x00, 0xbc, 0x0b, 0x0b, 0x03, 0xfd, 0x12, 0xfc, 0x10, 0xcc, 0x02, 0x9c, 0x04, 0x24, 0xf9, 0xc3, 0xf2, 0xc5, 0xf6, 0x04, 0xef, 0x44, 0xf5, 0xd7, 0xff, 0x76, 0xfe, 0xb9, 0x07, 0x3f, 0x0e, 0x39, 0x0a, 0xff, 0x0f, 0x39, 0x0c, 0xdf, 0x04, 0xd9, 0x03, 0xb6, 0xfc, 0x63, 0xfa, 0x25, 0xfc, 0xa2, 0xf8, 0x67, 0xfb, 0x10, 0xfe, 0x29, 0xfc, 0x5f, 0xfb, 0xa8, 0xf9, 0x21, 0xfb, 0x36, 0xfd, 0xe4, 0xf8, 0xa3, 0xf9, 0x1d, 0x06, 0xfb, 0x19, 0xfd, 0x1b, 0xbc, 0x08, 0xfc, 0x14, 0xfc, 0x18, 0xe4, 0xf8, 0xc3, 0xf4, 0x46, 0xf1, 0x02, 0xe2, 0x06, 0xef, 0x02, 0xee, 0x05, 0xec, 0x9c, 0x05, 0x5b, 0x07, 0xdd, 0x04, 0xfc, 0x12, 0xbb, 0x08, 0xae, 0x01, 0x2a, 0x02, 0x45, 0xf6, 0x43, 0xf6, 0x46, 0xf5, 0xc2, 0xf0, 0xe6, 0xfa, 0x72, 0xfe, 0xa1, 0xff, 0x3c, 0x0b, 0xbc, 0x0b, 0xbc, 0x0a, 0xbc, 0x0e, 0xbc, 0x08, 0x5c, 0x06, 0x4c, 0x03, 0xa3, 0xfa, 0x56, 0xfd, 0xd1, 0xfc, 0xe9, 0xf8, 0x1e, 0xfc, 0x69, 0xfc, 0x20, 0xfc, 0xa7, 0xfb, 0x42, 0xf8, 0x27, 0xfc, 0xf0, 0xfd, 0x28, 0xf9, 0xe0, 0xfb, 0xbf, 0x08, 0xfb, 0x1b, 0xfc, 0x1a, 0xbd, 0x09, 0xfa, 0x15, 0xfe, 0x15, 0x43, 0xf7, 0xc4, 0xf5, 0x05, 0xef, 0x03, 0xe2, 0x04, 0xef, 0x05, 0xed, 0x02, 0xef, 0x5f, 0x05, 0x19, 0x05, 0x1f, 0x07, 0xf8, 0x0f, 0xa0, 0x06, 0xa9, 0x02, 0xa7, 0x00, 0xc1, 0xf5, 0x27, 0xf9, 0xc1, 0xf5, 0x47, 0xf1, 0xd1, 0xfc, 0xb7, 0xfd, 0x79, 0xff, 0x3f, 0x0b, 0xba, 0x09, 0xbc, 0x0a, 0xfe, 0x0f, 0x39, 0x08, 0x5e, 0x05, 0xdc, 0x03, 0xa2, 0xfb, 0xe7, 0xfb, 0x61, 0xfb, 0xc7, 0xf7, 0x21, 0xfb, 0xd6, 0xfc, 0xf3, 0xfc, 0xe4, 0xfa, 0xe5, 0xf8, 0xf3, 0xfd, 0x34, 0xfe, 0xa5, 0xfa, 0x13, 0xfd, 0xbc, 0x07, 0xfd, 0x19, 0xfa, 0x18, 0x3f, 0x09, 0xf9, 0x13, 0xfe, 0x12, 0xa2, 0xf8, 0x47, 0xf5, 0x01, 0xee, 0x06, 0xe5, 0x43, 0xf1, 0x04, 0xed, 0xc5, 0xf0, 0x1b, 0x05, 0x1c, 0x06, 0x5d, 0x07, 0xbb, 0x0e, 0x9c, 0x06, 0xdd, 0x03, 0x0e, 0x00, 0x46, 0xf7, 0xe3, 0xf8, 0xc4, 0xf6, 0x44, 0xf5, 0x94, 0xfd, 0x14, 0xfe, 0xcc, 0x01, 0xbd, 0x09, 0xba, 0x07, 0x3d, 0x0b, 0x3d, 0x0c, 0xd9, 0x05, 0xa0, 0x05, 0x61, 0x01, 0xe5, 0xfb, 0x75, 0xfd, 0x22, 0xfb, 0x66, 0xfa, 0xb3, 0xfd, 0x54, 0xfd, 0xb4, 0xfd, 0xa5, 0xfb, 0xe2, 0xf8, 0xd6, 0xfd, 0xf3, 0xfd, 0xa5, 0xfa, 0xf3, 0xfd, 0xdd, 0x05, 0xfa, 0x16, 0xfe, 0x17, 0xbb, 0x08, 0xfd, 0x10, 0xfc, 0x10, 0xe3, 0xfa, 0x45, 0xf7, 0x02, 0xef, 0x07, 0xe9, 0x42, 0xf2, 0x05, 0xed, 0x43, 0xf1, 0x1d, 0x04, 0xeb, 0x02, 0x5d, 0x05, 0xbc, 0x0c, 0x5b, 0x06, 0x1d, 0x04, 0x68, 0x00, 0x23, 0xf9, 0x65, 0xfa, 0xc4, 0xf6, 0x44, 0xf6, 0x94, 0xfd, 0x14, 0xfd, 0x2c, 0x02, 0xbc, 0x07, 0x5c, 0x07, 0xbc, 0x0b, 0x3c, 0x0a, 0x9d, 0x06, 0xda, 0x06, 0xa6, 0x00, 0x93, 0xfd, 0xb3, 0xfd, 0x27, 0xfb, 0x60, 0xfc, 0x28, 0xfc, 0xa1, 0xfb, 0xf5, 0xfc, 0x44, 0xf8, 0x44, 0xf8, 0x54, 0xfd, 0xa4, 0xfb, 0x63, 0xfb, 0x02, 0x00, 0xba, 0x0b, 0xfe, 0x17, 0xf9, 0x10, 0xbf, 0x0b, 0xfa, 0x16, 0x3e, 0x0a, 0xa2, 0xfb, 0x65, 0xf9, 0x03, 0xed, 0x05, 0xef, 0xc4, 0xf0, 0x03, 0xea, 0xa6, 0xf8, 0x52, 0x01, 0xd5, 0xfd, 0xdb, 0x06, 0x3d, 0x09, 0x9c, 0x04, 0x1d, 0x04, 0xf1, 0xfd, 0x68, 0xfc, 0xe0, 0xfb, 0xc7, 0xf6, 0x62, 0xfa, 0x35, 0xfd, 0xb4, 0xfd, 0x9d, 0x03, 0xda, 0x03, 0x5e, 0x07, 0xb9, 0x0a, 0xe0, 0x06, 0x18, 0x07, 0xa0, 0x05, 0x91, 0x00, 0xa9, 0xff, 0x14, 0xfe };

                TestWebRequestCreate.MockHttpWebRequestWithGivenResponseCode(HttpStatusCode.OK,
                                                                             rawWav);

                Assert.IsTrue(rawWav.SequenceEqual(recordingsRequester.download("REb1eecfce410141ad1749c0fc84dfbb6fc4c2a810")));
            }
            catch (PersyException pe)
            {
                Assert.Fail(pe.Message);
            }
        }

        [TestMethod]
        public void GetRecordingStreamTest()
        {
            try
            {
                RecordingsRequester recordingsRequester = new RecordingsRequester("ACabe7063197551fe51671f9ac3a9708e9dad51c4d", "204c15aae7a486c42776aea4dbafe8c68a773071", "ACabe7063197551fe51671f9ac3a9708e9dad51c4d");

                Type type = typeof(APIRequester);
                FieldInfo fieldInfo = type.GetField("persyUrl", BindingFlags.NonPublic | BindingFlags.Instance);
                if (fieldInfo != null)
                {
                    fieldInfo.SetValue(recordingsRequester, "http://GetRecordingStreamTest:3000");
                }

                WebRequest.RegisterPrefix("http://GetRecordingStreamTest:3000", new TestWebRequestCreate());

                byte[] rawWav = { 0x52, 0x49, 0x46, 0x46, 0x84, 0x0a, 0x00, 0x00, 0x57, 0x41, 0x56, 0x45, 0x66, 0x6d, 0x74, 0x20, 0x10, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01, 0x00, 0x40, 0x1f, 0x00, 0x00, 0x80, 0x3e, 0x00, 0x00, 0x02, 0x00, 0x10, 0x00, 0x64, 0x61, 0x74, 0x61, 0x60, 0x0a, 0x00, 0x00, 0xf8, 0xff, 0xf0, 0xff, 0xf1, 0xff, 0xf5, 0xff, 0xfc, 0xff, 0xf3, 0xff, 0xf6, 0xff, 0xe3, 0xff, 0xea, 0xff, 0xf0, 0xff, 0xf7, 0xff, 0xf9, 0xff, 0xf7, 0xff, 0xf8, 0xff, 0xf9, 0xff, 0xf7, 0xff, 0xf1, 0xff, 0xef, 0xff, 0xe8, 0xff, 0xf8, 0xff, 0x01, 0x00, 0x07, 0x00, 0x11, 0x00, 0x07, 0x00, 0x08, 0x00, 0x08, 0x00, 0x01, 0x00, 0xf7, 0xff, 0xf9, 0xff, 0xee, 0xff, 0xf1, 0xff, 0xf8, 0xff, 0x08, 0x00, 0x08, 0x00, 0xf8, 0xff, 0xff, 0xff, 0xf9, 0xff, 0x00, 0x00, 0x07, 0x00, 0x0a, 0x00, 0x05, 0x00, 0x03, 0x00, 0x06, 0x00, 0x09, 0x00, 0xff, 0xff, 0x01, 0x00, 0x07, 0x00, 0x09, 0x00, 0xff, 0xff, 0xf9, 0xff, 0xef, 0xff, 0xf9, 0xff, 0xf8, 0xff, 0xff, 0xff, 0x02, 0x00, 0xf5, 0xff, 0x02, 0x00, 0xf8, 0xff, 0xf0, 0xff, 0xe8, 0xff, 0xe7, 0xff, 0xf8, 0xff, 0x01, 0x00, 0xf8, 0xff, 0xef, 0xff, 0xf1, 0xff, 0xe7, 0xff, 0xe0, 0xff, 0xd9, 0xff, 0xd7, 0xff, 0xd9, 0xff, 0xd8, 0xff, 0xe6, 0xff, 0xf2, 0xff, 0xef, 0xff, 0xf8, 0xff, 0x09, 0x00, 0x06, 0x00, 0x0b, 0x00, 0x0c, 0x00, 0x13, 0x00, 0x06, 0x00, 0x00, 0x00, 0x0b, 0x00, 0x04, 0x00, 0x0b, 0x00, 0x0e, 0x00, 0x10, 0x00, 0x11, 0x00, 0x10, 0x00, 0x1f, 0x00, 0x22, 0x00, 0x15, 0x00, 0x13, 0x00, 0xfe, 0xff, 0x02, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x06, 0x00, 0x01, 0x00, 0xf9, 0xff, 0xf5, 0xff, 0xf3, 0xff, 0xe5, 0xff, 0xf4, 0xff, 0xf5, 0xff, 0xf9, 0xff, 0xf8, 0xff, 0xf7, 0xff, 0x0a, 0x00, 0x07, 0x00, 0x10, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x10, 0x00, 0x09, 0x00, 0x07, 0x00, 0x0f, 0x00, 0x12, 0x00, 0x0e, 0x00, 0xf2, 0xff, 0xdf, 0xff, 0xbf, 0xff, 0xda, 0xff, 0xe6, 0xff, 0xf2, 0xff, 0x07, 0x00, 0x17, 0x00, 0x12, 0x00, 0x16, 0x00, 0x1a, 0x00, 0x0f, 0x00, 0x08, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xda, 0xff, 0xd6, 0xff, 0xda, 0xff, 0xdd, 0xff, 0xf3, 0xff, 0xd5, 0xff, 0x13, 0x00, 0x45, 0x00, 0x42, 0x00, 0x48, 0x00, 0x47, 0x00, 0x31, 0x00, 0x27, 0x00, 0x11, 0x00, 0x18, 0x00, 0x10, 0x00, 0x20, 0x00, 0x40, 0x00, 0x48, 0x00, 0x37, 0x00, 0x1a, 0x00, 0xfe, 0xff, 0xda, 0xff, 0x9e, 0xff, 0x89, 0xff, 0x87, 0xff, 0x8a, 0xff, 0x9e, 0xff, 0xb9, 0xff, 0xb0, 0xff, 0xcf, 0xff, 0xea, 0xff, 0xce, 0xff, 0xda, 0xff, 0xce, 0xff, 0xc2, 0xff, 0xd6, 0xff, 0xf2, 0xff, 0xef, 0xff, 0x0f, 0x00, 0x33, 0x00, 0x4d, 0x00, 0x52, 0x00, 0x37, 0x00, 0x27, 0x00, 0x1a, 0x00, 0xef, 0xff, 0xd0, 0xff, 0x09, 0x00, 0x1e, 0x00, 0x62, 0x00, 0xa3, 0x00, 0xe4, 0x00, 0x14, 0x01, 0x04, 0x01, 0x15, 0x01, 0x23, 0x01, 0x14, 0x01, 0xe4, 0x00, 0xe3, 0x00, 0xc7, 0x00, 0x81, 0x00, 0x42, 0x00, 0xf6, 0xff, 0xa2, 0xff, 0x4a, 0xff, 0xff, 0xfe, 0xb8, 0xfe, 0x79, 0xfe, 0x4f, 0xfe, 0xf9, 0xfd, 0xef, 0xfd, 0xb8, 0xfd, 0xb2, 0xfd, 0x54, 0xfd, 0xf6, 0xfc, 0x52, 0xfd, 0x95, 0xfd, 0x14, 0xfe, 0xdb, 0xfe, 0x6d, 0xff, 0x68, 0x00, 0x53, 0x01, 0xad, 0x01, 0x0c, 0x02, 0x6a, 0x02, 0x70, 0x02, 0x47, 0x02, 0x90, 0x02, 0x69, 0x02, 0x8e, 0x02, 0xcb, 0x02, 0xcd, 0x02, 0xca, 0x02, 0xce, 0x02, 0x4b, 0x02, 0xac, 0x02, 0x9d, 0x03, 0x1b, 0x04, 0x5c, 0x04, 0x1d, 0x05, 0xdb, 0x04, 0x5d, 0x04, 0x1c, 0x04, 0xcb, 0x01, 0xd1, 0xff, 0x54, 0xfd, 0xe3, 0xfa, 0xa5, 0xf8, 0xc4, 0xf6, 0xc4, 0xf4, 0x44, 0xf3, 0x44, 0xf3, 0x43, 0xf2, 0xc6, 0xf2, 0x42, 0xf5, 0x46, 0xf6, 0x63, 0xf9, 0x24, 0xfc, 0xbc, 0xfe, 0x74, 0x01, 0x5b, 0x04, 0x1f, 0x06, 0x58, 0x07, 0x40, 0x08, 0x38, 0x09, 0x3f, 0x0a, 0xbb, 0x09, 0xbc, 0x07, 0xdc, 0x06, 0x5c, 0x07, 0x9b, 0x06, 0xde, 0x05, 0x1a, 0x05, 0x1e, 0x04, 0x1a, 0x04, 0x9d, 0x06, 0x3c, 0x08, 0xdb, 0x06, 0x5e, 0x07, 0xba, 0x07, 0xbe, 0x07, 0x5a, 0x06, 0x9d, 0x03, 0x8c, 0xfe, 0x24, 0xfa, 0x45, 0xf7, 0xc2, 0xf0, 0x06, 0xec, 0x02, 0xea, 0x06, 0xe5, 0x02, 0xe7, 0x06, 0xe9, 0x02, 0xec, 0xc6, 0xf0, 0x42, 0xf5, 0xa6, 0xf9, 0x1e, 0x00, 0x9d, 0x05, 0xbc, 0x08, 0x3b, 0x0b, 0x3e, 0x0c, 0x3a, 0x0d, 0x3d, 0x0e, 0x3c, 0x0e, 0xbc, 0x0c, 0xbc, 0x0b, 0xbc, 0x0a, 0xbc, 0x09, 0xbb, 0x09, 0x3e, 0x09, 0x9b, 0x06, 0x1d, 0x05, 0xca, 0x01, 0x9e, 0xfe, 0xb9, 0xfe, 0xf9, 0xfc, 0x5f, 0xf9, 0x48, 0xf8, 0xc1, 0xf7, 0x25, 0xf9, 0xfc, 0xfe, 0xcd, 0x02, 0x8a, 0x02, 0x5f, 0x05, 0x38, 0x09, 0xc0, 0x0a, 0x38, 0x0d, 0x40, 0x0b, 0x98, 0x04, 0x64, 0x00, 0x51, 0xfe, 0x26, 0xf9, 0x42, 0xf5, 0xc5, 0xf0, 0x04, 0xec, 0x04, 0xed, 0x44, 0xf2, 0x44, 0xf4, 0xc3, 0xf6, 0xe6, 0xf9, 0x62, 0xfa, 0xcd, 0xfe, 0xdc, 0x03, 0xdb, 0x03, 0x6e, 0x02, 0xea, 0x02, 0x2e, 0x03, 0x1a, 0x04, 0x5d, 0x05, 0xdc, 0x03, 0xcc, 0x02, 0xdc, 0x03, 0x5c, 0x05, 0xbc, 0x07, 0xbc, 0x07, 0xdc, 0x05, 0x2c, 0x03, 0xe1, 0xff, 0xa5, 0xff, 0xd8, 0x00, 0x70, 0xfd, 0x28, 0xf9, 0x41, 0xf8, 0x45, 0xf7, 0x94, 0xfc, 0x1c, 0x05, 0x9b, 0x05, 0x4e, 0x03, 0xb9, 0x08, 0x40, 0x0d, 0x38, 0x0f, 0x00, 0x14, 0xb8, 0x0e, 0xaf, 0x02, 0xca, 0xfe, 0xf6, 0xfd, 0x43, 0xf7, 0xc4, 0xf2, 0x04, 0xee, 0x03, 0xe6, 0x06, 0xe9, 0xc2, 0xf1, 0x46, 0xf4, 0x41, 0xf7, 0x67, 0xfa, 0xe1, 0xf8, 0x20, 0xff, 0x18, 0x07, 0xde, 0x05, 0x6b, 0x03, 0xcc, 0x02, 0x8e, 0x01, 0x59, 0x05, 0xbf, 0x09, 0x59, 0x06, 0x1f, 0x04, 0x59, 0x05, 0xde, 0x05, 0xbb, 0x08, 0x3c, 0x0b, 0xdd, 0x06, 0xab, 0x02, 0x00, 0x00, 0x95, 0xfd, 0x5a, 0xff, 0xdd, 0xfe, 0xa5, 0xf8, 0x42, 0xf6, 0xc6, 0xf5, 0xa3, 0xf8, 0x0c, 0x03, 0x3c, 0x0a, 0x5d, 0x05, 0x39, 0x08, 0x00, 0x12, 0xf9, 0x11, 0xfe, 0x17, 0xfa, 0x19, 0x3e, 0x09, 0x72, 0xfe, 0x8a, 0xff, 0x42, 0xf8, 0x05, 0xf0, 0x04, 0xec, 0x05, 0xe2, 0x83, 0xdd, 0x03, 0xea, 0x06, 0xf0, 0x02, 0xf0, 0x46, 0xf5, 0x42, 0xf5, 0xa6, 0xf8, 0x5b, 0x04, 0xbc, 0x07, 0x1d, 0x05, 0x59, 0x05, 0x0f, 0x03, 0x5a, 0x05, 0xbe, 0x0c, 0x3a, 0x0c, 0x3e, 0x09, 0xb9, 0x09, 0xbf, 0x08, 0x3a, 0x0a, 0x3e, 0x0e, 0x39, 0x0b, 0xa0, 0x04, 0x80, 0x00, 0xa8, 0xfb, 0xe0, 0xfb, 0xf8, 0xfd, 0x41, 0xf8, 0x46, 0xf3, 0xc3, 0xf2, 0xc4, 0xf4, 0xed, 0x01, 0xbb, 0x0d, 0x3c, 0x08, 0xbc, 0x09, 0xfd, 0x14, 0xfb, 0x15, 0xfc, 0x1a, 0xfc, 0x1e, 0xbc, 0x09, 0xe5, 0xfa, 0x0b, 0xff, 0x45, 0xf6, 0x02, 0xeb, 0x07, 0xea, 0x81, 0xdd, 0x87, 0xd7, 0x01, 0xe8, 0x07, 0xed, 0x02, 0xee, 0x45, 0xf7, 0x44, 0xf5, 0xc2, 0xf7, 0x20, 0x07, 0xb8, 0x09, 0xbf, 0x07, 0xbb, 0x08, 0x8b, 0x02, 0x9e, 0x03, 0xba, 0x0c, 0xbd, 0x0a, 0x1c, 0x07, 0x5b, 0x07, 0x9d, 0x04, 0xbd, 0x07, 0x39, 0x0f, 0xc0, 0x0c, 0x57, 0x07, 0x71, 0x03, 0xf1, 0xfd, 0x6d, 0xff, 0x8c, 0x02, 0x63, 0xfb, 0xc6, 0xf5, 0xc2, 0xf2, 0x06, 0xf0, 0xea, 0xfe, 0x3d, 0x0e, 0xdc, 0x05, 0x9c, 0x06, 0xfc, 0x16, 0xfc, 0x13, 0xfb, 0x18, 0x7e, 0x20, 0xba, 0x09, 0x45, 0xf8, 0x0c, 0x02, 0x43, 0xf6, 0x05, 0xe9, 0x04, 0xed, 0x83, 0xdd, 0x86, 0xd3, 0x02, 0xea, 0x05, 0xee, 0x04, 0xee, 0x64, 0xfb, 0x44, 0xf7, 0xc4, 0xf5, 0x3c, 0x08, 0xbc, 0x09, 0x1d, 0x06, 0xba, 0x0a, 0xee, 0x02, 0x56, 0x00, 0x3e, 0x0c, 0xbb, 0x0a, 0x5b, 0x06, 0xbf, 0x08, 0xd8, 0x03, 0x1f, 0x05, 0xba, 0x0e, 0xbd, 0x0c, 0x5c, 0x07, 0x9c, 0x04, 0xd3, 0xfd, 0xcd, 0xfe, 0x8b, 0x02, 0xe6, 0xfb, 0x41, 0xf7, 0x48, 0xf4, 0xff, 0xee, 0x01, 0xff, 0xb9, 0x0d, 0x1d, 0x05, 0x3d, 0x08, 0xfa, 0x17, 0xfe, 0x12, 0xfb, 0x18, 0x7c, 0x24, 0xbc, 0x08, 0x24, 0xfa, 0x5c, 0x04, 0x45, 0xf4, 0x01, 0xe6, 0x08, 0xed, 0x80, 0xdd, 0x87, 0xd3, 0x03, 0xea, 0x03, 0xea, 0x05, 0xea, 0x24, 0xfc, 0x44, 0xf7, 0x44, 0xf6, 0xbb, 0x09, 0x3d, 0x08, 0x9a, 0x05, 0x00, 0x10, 0x97, 0x05, 0xf8, 0x00, 0xb9, 0x0e, 0xbe, 0x0a, 0x9b, 0x05, 0xbc, 0x0c, 0x9d, 0x04, 0x2a, 0x02, 0xbf, 0x0e, 0xb8, 0x0b, 0xe0, 0x06, 0x39, 0x09, 0x36, 0xfe, 0xe3, 0xfa, 0x8c, 0x01, 0x24, 0xfb, 0x44, 0xf7, 0x44, 0xf5, 0x04, 0xed, 0x44, 0xf8, 0x3c, 0x0c, 0x9c, 0x05, 0x5b, 0x06, 0xfe, 0x17, 0xfa, 0x12, 0xfe, 0x16, 0x7a, 0x24, 0xfd, 0x0f, 0x64, 0xfb, 0xdc, 0x06, 0xe4, 0xf8, 0x04, 0xe6, 0x04, 0xec, 0x84, 0xdf, 0x83, 0xd3, 0x06, 0xe9, 0x02, 0xe9, 0x05, 0xe4, 0xa4, 0xf9, 0xe3, 0xf9, 0x45, 0xf5, 0x9c, 0x06, 0x5b, 0x05, 0x0d, 0x02, 0xfc, 0x0f, 0xbb, 0x09, 0xc9, 0xff, 0xbc, 0x0a, 0xbb, 0x0a, 0x1e, 0x07, 0xba, 0x0d, 0xbd, 0x07, 0x9c, 0x03, 0x3b, 0x0d, 0xbd, 0x0b, 0xbc, 0x07, 0x3c, 0x09, 0x9b, 0xfe, 0x66, 0xfa, 0xe9, 0xfe, 0x47, 0xf8, 0x43, 0xf6, 0xc3, 0xf5, 0x06, 0xec, 0x42, 0xf7, 0xbe, 0x0c, 0x3b, 0x0a, 0xbc, 0x09, 0xfc, 0x18, 0xfd, 0x16, 0xfa, 0x12, 0xff, 0x1e, 0x39, 0x0f, 0x66, 0xf9, 0x97, 0xff, 0xe5, 0xf8, 0x02, 0xe9, 0x06, 0xe8, 0x03, 0xe3, 0x05, 0xe1, 0x03, 0xed, 0x04, 0xec, 0x44, 0xf1, 0xb5, 0x00, 0x63, 0xfb, 0x45, 0xf8, 0xf7, 0xff, 0x8d, 0xfe, 0x5b, 0x04, 0x3c, 0x0b, 0xcd, 0x01, 0x2b, 0xff, 0x3e, 0x09, 0xb9, 0x0d, 0xbf, 0x0e, 0x38, 0x0c, 0xc0, 0x07, 0xba, 0x0c, 0xfd, 0x0f, 0xbb, 0x09, 0x1d, 0x07, 0x3a, 0x0a, 0xdf, 0x06, 0x41, 0xf3, 0x07, 0xe6, 0x02, 0xee, 0x45, 0xf4, 0x03, 0xe8, 0x85, 0xdd, 0xc3, 0xf4, 0x7e, 0x30, 0x79, 0x45, 0x7e, 0x20, 0xfc, 0x1b, 0xfa, 0x1d, 0xff, 0x13, 0xf9, 0x0f, 0x06, 0xe6, 0x83, 0xbe, 0x84, 0xdb, 0x05, 0xea, 0x82, 0xd9, 0x06, 0xe6, 0x03, 0xef, 0xc4, 0xf7, 0xfe, 0x13, 0xf8, 0x11, 0xf8, 0x00, 0xb9, 0x07, 0x3e, 0x09, 0x5c, 0x05, 0xab, 0x01, 0x04, 0xf0, 0x05, 0xee, 0x22, 0xfc, 0x27, 0xfb, 0xe1, 0xfa, 0xae, 0x02, 0x83, 0x00, 0xbd, 0x07, 0xfa, 0x12, 0x3f, 0x0b, 0xb9, 0x07, 0xbf, 0x0c, 0x5a, 0x07, 0x9d, 0x04, 0x1b, 0x04, 0xa6, 0xf8, 0x22, 0xfa, 0xa2, 0xff, 0xc2, 0xf0, 0x06, 0xec, 0x43, 0xf5, 0x44, 0xf6, 0xe4, 0xf9, 0xa1, 0xff, 0x2a, 0x03, 0xfe, 0x1e, 0x7b, 0x32, 0xfb, 0x18, 0xff, 0x0f, 0xf8, 0x1c, 0x40, 0x09, 0x40, 0xf8, 0x08, 0xee, 0x80, 0xd1, 0x87, 0xd7, 0x43, 0xf2, 0x84, 0xdf, 0x04, 0xe7, 0x3c, 0x0a, 0xfc, 0x10, 0xfd, 0x15, 0xfa, 0x1d, 0x3f, 0x0f, 0xf9, 0x0f, 0x3f, 0x0f, 0xc1, 0xf3, 0x07, 0xf0, 0x41, 0xf4, 0x07, 0xe9, 0xc1, 0xf0, 0x46, 0xf8, 0xe4, 0xf9, 0xbb, 0x0d, 0xfc, 0x12, 0xbc, 0x07, 0xfd, 0x10, 0xfb, 0x13, 0x5e, 0x06, 0xd8, 0x05, 0xb8, 0xfd, 0x41, 0xf7, 0x6f, 0x02, 0xe2, 0xfa, 0x05, 0xf0, 0x23, 0xfb, 0xc5, 0xf6, 0x03, 0xee, 0xa5, 0xf8, 0x44, 0xf8, 0xa3, 0xf9, 0x9d, 0x04, 0x0b, 0x03, 0xfd, 0x11, 0x7b, 0x30, 0x7c, 0x20, 0x1d, 0x04, 0xfa, 0x16, 0xfe, 0x10, 0x03, 0xed, 0x03, 0xe8, 0x86, 0xd7, 0x82, 0xd1, 0x05, 0xef, 0x04, 0xe6, 0x04, 0xe5, 0xfb, 0x13, 0xfd, 0x1a, 0x3c, 0x0d, 0xfb, 0x19, 0xfe, 0x14, 0xba, 0x09, 0x6d, 0x02, 0x04, 0xeb, 0x04, 0xeb, 0x43, 0xf7, 0x06, 0xed, 0x02, 0xed, 0x85, 0x00, 0x5b, 0x07, 0x3e, 0x0c, 0xf9, 0x0f, 0xbf, 0x09, 0x3a, 0x0e, 0xfc, 0x10, 0x35, 0x01, 0x63, 0xfb, 0x14, 0xfd, 0x65, 0xfa, 0x64, 0xfb, 0x62, 0xf9, 0x27, 0xf9, 0xb0, 0x00, 0x18, 0xfe, 0xa2, 0xf8, 0x24, 0xfc, 0x55, 0xfd, 0x52, 0xfe, 0xee, 0xfe, 0xe3, 0xfa, 0xdd, 0x06, 0x7a, 0x20, 0x7e, 0x22, 0x9a, 0x05, 0xfe, 0x0f, 0xfb, 0x1d, 0x44, 0xf7, 0x05, 0xe6, 0x02, 0xe8, 0x87, 0xdd, 0x00, 0xea, 0x09, 0xed, 0x00, 0xe7, 0x3e, 0x0d, 0xfc, 0x1b, 0x3a, 0x08, 0xff, 0x14, 0xfa, 0x1d, 0x3d, 0x09, 0xe3, 0xf9, 0x05, 0xf0, 0x03, 0xf0, 0x45, 0xf5, 0x03, 0xea, 0x05, 0xeb, 0x1b, 0x06, 0x3d, 0x0b, 0x1b, 0x05, 0xbc, 0x0e, 0xfd, 0x12, 0xbb, 0x0d, 0xbc, 0x07, 0x5c, 0xff, 0x55, 0xfe, 0x12, 0xfd, 0x46, 0xf6, 0x42, 0xf8, 0xf5, 0xfd, 0x14, 0xfd, 0x64, 0xfc, 0x1b, 0xff, 0x16, 0xfe, 0x62, 0xfb, 0xe5, 0xf9, 0xa4, 0xfb, 0x13, 0xfe, 0xa6, 0xfa, 0x96, 0xff, 0xfe, 0x1b, 0x7b, 0x26, 0xbc, 0x0a, 0x3c, 0x0b, 0xfc, 0x1e, 0x7c, 0xff, 0x04, 0xe6, 0x05, 0xe8, 0x83, 0xdb, 0x04, 0xe7, 0x05, 0xf0, 0x02, 0xe7, 0xdf, 0x05, 0xf9, 0x1a, 0xbf, 0x09, 0xf9, 0x12, 0xff, 0x19, 0x99, 0x06, 0x96, 0xfc, 0x43, 0xf3, 0x05, 0xee, 0x43, 0xf2, 0x04, 0xee, 0x04, 0xef, 0x9d, 0x03, 0x3b, 0x08, 0x1c, 0x07, 0xfc, 0x13, 0xfc, 0x12, 0xbd, 0x0b, 0x3a, 0x09, 0x6e, 0x02, 0xf2, 0xfd, 0xe7, 0xf9, 0xc1, 0xf4, 0xa5, 0xf9, 0x65, 0xfb, 0xa1, 0xfb, 0x3a, 0xfd, 0x51, 0x00, 0xf2, 0xfe, 0x9f, 0xfa, 0xa7, 0xfa, 0x33, 0xfe, 0x95, 0xfc, 0x23, 0xf9, 0xfd, 0xfe, 0xfb, 0x14, 0x7c, 0x26, 0xfd, 0x10, 0x3b, 0x08, 0x7d, 0x20, 0x3b, 0x09, 0x05, 0xe7, 0x03, 0xeb, 0x05, 0xe4, 0x03, 0xe3, 0x04, 0xef, 0x04, 0xea, 0x75, 0xfe, 0xfb, 0x15, 0x3d, 0x09, 0xfb, 0x10, 0xfc, 0x19, 0x9d, 0x06, 0xf3, 0xfd, 0xe5, 0xf8, 0x04, 0xf0, 0xc2, 0xf1, 0x07, 0xef, 0xc1, 0xf0, 0xe7, 0x00, 0x69, 0x03, 0xde, 0x03, 0xfa, 0x10, 0xfe, 0x10, 0xbb, 0x0b, 0x3c, 0x0c, 0xdc, 0x05, 0x6c, 0x02, 0xf3, 0xfc, 0xc6, 0xf6, 0xd2, 0xfc, 0xa6, 0xfa, 0xc3, 0xf6, 0x92, 0xfc, 0x18, 0xfd, 0x60, 0xfa, 0x27, 0xf9, 0xe3, 0xf8, 0x33, 0xfd, 0x65, 0xfc, 0xe4, 0xf8, 0x6c, 0x02, 0xfc, 0x16, 0x7c, 0x24, 0xfb, 0x12, 0x3e, 0x0c, 0xfa, 0x1e, 0x9e, 0x03, 0x02, 0xe8, 0x05, 0xf0, 0x84, 0xdf, 0x05, 0xe2, 0x01, 0xf0, 0x08, 0xe7, 0x47, 0xff, 0x01, 0x12, 0x59, 0x04, 0xfe, 0x11, 0xfa, 0x17, 0x54, 0x01, 0x42, 0x00, 0x61, 0xfa, 0x08, 0xf0, 0xc0, 0xf3, 0xc7, 0xf0, 0xc1, 0xf3, 0xd0, 0x02, 0x50, 0x01, 0x60, 0x05, 0xf9, 0x10, 0xbd, 0x0b, 0x3c, 0x0a, 0x3c, 0x0c, 0x1c, 0x05, 0x4d, 0x03, 0x72, 0xfd, 0x45, 0xf8, 0x34, 0xfe, 0xa3, 0xfa, 0x46, 0xf8, 0xfa, 0xfe, 0x65, 0xfc, 0x23, 0xfb, 0xe5, 0xfa, 0x64, 0xf9, 0xf4, 0xfc, 0x23, 0xfb, 0x44, 0xf8, 0x1e, 0x04, 0xf9, 0x17, 0x80, 0x20, 0xb8, 0x0e, 0xff, 0x0f, 0x7a, 0x20, 0x3d, 0xff, 0x04, 0xec, 0x44, 0xf3, 0x84, 0xdf, 0x04, 0xe6, 0x04, 0xee, 0x04, 0xe7, 0x2c, 0x02, 0xbc, 0x0e, 0x2c, 0x03, 0xfc, 0x14, 0xfc, 0x13, 0x43, 0x01, 0x6e, 0x02, 0x42, 0xf8, 0x06, 0xf0, 0xc2, 0xf5, 0x05, 0xef, 0xc4, 0xf4, 0xac, 0x01, 0x4b, 0xff, 0x5e, 0x06, 0x3a, 0x0f, 0xbe, 0x0a, 0x3a, 0x0d, 0xbd, 0x0c, 0xdc, 0x03, 0xdb, 0x03, 0xf6, 0xfd, 0x41, 0xf8, 0x97, 0xfd, 0xa3, 0xf9, 0x23, 0xfa, 0xd2, 0xff, 0x11, 0xfd, 0x66, 0xfc, 0xa5, 0xfa, 0x61, 0xf9, 0x38, 0xfd, 0x9f, 0xf9, 0x49, 0xf6, 0x49, 0x02, 0xfd, 0x15, 0x7c, 0x20, 0xfb, 0x0f, 0xfe, 0x10, 0x7a, 0x20, 0x8e, 0x01, 0xc2, 0xf0, 0xc5, 0xf3, 0x04, 0xe2, 0x03, 0xe8, 0x06, 0xee, 0x02, 0xe6, 0x39, 0x00, 0xbc, 0x0b, 0x0b, 0x03, 0xfd, 0x12, 0xfc, 0x10, 0xcc, 0x02, 0x9c, 0x04, 0x24, 0xf9, 0xc3, 0xf2, 0xc5, 0xf6, 0x04, 0xef, 0x44, 0xf5, 0xd7, 0xff, 0x76, 0xfe, 0xb9, 0x07, 0x3f, 0x0e, 0x39, 0x0a, 0xff, 0x0f, 0x39, 0x0c, 0xdf, 0x04, 0xd9, 0x03, 0xb6, 0xfc, 0x63, 0xfa, 0x25, 0xfc, 0xa2, 0xf8, 0x67, 0xfb, 0x10, 0xfe, 0x29, 0xfc, 0x5f, 0xfb, 0xa8, 0xf9, 0x21, 0xfb, 0x36, 0xfd, 0xe4, 0xf8, 0xa3, 0xf9, 0x1d, 0x06, 0xfb, 0x19, 0xfd, 0x1b, 0xbc, 0x08, 0xfc, 0x14, 0xfc, 0x18, 0xe4, 0xf8, 0xc3, 0xf4, 0x46, 0xf1, 0x02, 0xe2, 0x06, 0xef, 0x02, 0xee, 0x05, 0xec, 0x9c, 0x05, 0x5b, 0x07, 0xdd, 0x04, 0xfc, 0x12, 0xbb, 0x08, 0xae, 0x01, 0x2a, 0x02, 0x45, 0xf6, 0x43, 0xf6, 0x46, 0xf5, 0xc2, 0xf0, 0xe6, 0xfa, 0x72, 0xfe, 0xa1, 0xff, 0x3c, 0x0b, 0xbc, 0x0b, 0xbc, 0x0a, 0xbc, 0x0e, 0xbc, 0x08, 0x5c, 0x06, 0x4c, 0x03, 0xa3, 0xfa, 0x56, 0xfd, 0xd1, 0xfc, 0xe9, 0xf8, 0x1e, 0xfc, 0x69, 0xfc, 0x20, 0xfc, 0xa7, 0xfb, 0x42, 0xf8, 0x27, 0xfc, 0xf0, 0xfd, 0x28, 0xf9, 0xe0, 0xfb, 0xbf, 0x08, 0xfb, 0x1b, 0xfc, 0x1a, 0xbd, 0x09, 0xfa, 0x15, 0xfe, 0x15, 0x43, 0xf7, 0xc4, 0xf5, 0x05, 0xef, 0x03, 0xe2, 0x04, 0xef, 0x05, 0xed, 0x02, 0xef, 0x5f, 0x05, 0x19, 0x05, 0x1f, 0x07, 0xf8, 0x0f, 0xa0, 0x06, 0xa9, 0x02, 0xa7, 0x00, 0xc1, 0xf5, 0x27, 0xf9, 0xc1, 0xf5, 0x47, 0xf1, 0xd1, 0xfc, 0xb7, 0xfd, 0x79, 0xff, 0x3f, 0x0b, 0xba, 0x09, 0xbc, 0x0a, 0xfe, 0x0f, 0x39, 0x08, 0x5e, 0x05, 0xdc, 0x03, 0xa2, 0xfb, 0xe7, 0xfb, 0x61, 0xfb, 0xc7, 0xf7, 0x21, 0xfb, 0xd6, 0xfc, 0xf3, 0xfc, 0xe4, 0xfa, 0xe5, 0xf8, 0xf3, 0xfd, 0x34, 0xfe, 0xa5, 0xfa, 0x13, 0xfd, 0xbc, 0x07, 0xfd, 0x19, 0xfa, 0x18, 0x3f, 0x09, 0xf9, 0x13, 0xfe, 0x12, 0xa2, 0xf8, 0x47, 0xf5, 0x01, 0xee, 0x06, 0xe5, 0x43, 0xf1, 0x04, 0xed, 0xc5, 0xf0, 0x1b, 0x05, 0x1c, 0x06, 0x5d, 0x07, 0xbb, 0x0e, 0x9c, 0x06, 0xdd, 0x03, 0x0e, 0x00, 0x46, 0xf7, 0xe3, 0xf8, 0xc4, 0xf6, 0x44, 0xf5, 0x94, 0xfd, 0x14, 0xfe, 0xcc, 0x01, 0xbd, 0x09, 0xba, 0x07, 0x3d, 0x0b, 0x3d, 0x0c, 0xd9, 0x05, 0xa0, 0x05, 0x61, 0x01, 0xe5, 0xfb, 0x75, 0xfd, 0x22, 0xfb, 0x66, 0xfa, 0xb3, 0xfd, 0x54, 0xfd, 0xb4, 0xfd, 0xa5, 0xfb, 0xe2, 0xf8, 0xd6, 0xfd, 0xf3, 0xfd, 0xa5, 0xfa, 0xf3, 0xfd, 0xdd, 0x05, 0xfa, 0x16, 0xfe, 0x17, 0xbb, 0x08, 0xfd, 0x10, 0xfc, 0x10, 0xe3, 0xfa, 0x45, 0xf7, 0x02, 0xef, 0x07, 0xe9, 0x42, 0xf2, 0x05, 0xed, 0x43, 0xf1, 0x1d, 0x04, 0xeb, 0x02, 0x5d, 0x05, 0xbc, 0x0c, 0x5b, 0x06, 0x1d, 0x04, 0x68, 0x00, 0x23, 0xf9, 0x65, 0xfa, 0xc4, 0xf6, 0x44, 0xf6, 0x94, 0xfd, 0x14, 0xfd, 0x2c, 0x02, 0xbc, 0x07, 0x5c, 0x07, 0xbc, 0x0b, 0x3c, 0x0a, 0x9d, 0x06, 0xda, 0x06, 0xa6, 0x00, 0x93, 0xfd, 0xb3, 0xfd, 0x27, 0xfb, 0x60, 0xfc, 0x28, 0xfc, 0xa1, 0xfb, 0xf5, 0xfc, 0x44, 0xf8, 0x44, 0xf8, 0x54, 0xfd, 0xa4, 0xfb, 0x63, 0xfb, 0x02, 0x00, 0xba, 0x0b, 0xfe, 0x17, 0xf9, 0x10, 0xbf, 0x0b, 0xfa, 0x16, 0x3e, 0x0a, 0xa2, 0xfb, 0x65, 0xf9, 0x03, 0xed, 0x05, 0xef, 0xc4, 0xf0, 0x03, 0xea, 0xa6, 0xf8, 0x52, 0x01, 0xd5, 0xfd, 0xdb, 0x06, 0x3d, 0x09, 0x9c, 0x04, 0x1d, 0x04, 0xf1, 0xfd, 0x68, 0xfc, 0xe0, 0xfb, 0xc7, 0xf6, 0x62, 0xfa, 0x35, 0xfd, 0xb4, 0xfd, 0x9d, 0x03, 0xda, 0x03, 0x5e, 0x07, 0xb9, 0x0a, 0xe0, 0x06, 0x18, 0x07, 0xa0, 0x05, 0x91, 0x00, 0xa9, 0xff, 0x14, 0xfe };

                TestWebRequestCreate.MockHttpWebRequestWithGivenResponseCode(HttpStatusCode.OK,
                                                                             rawWav);

                MemoryStream memoryStream = new MemoryStream();
                using (BinaryReader reader = new BinaryReader(recordingsRequester.stream("REb1eecfce410141ad1749c0fc84dfbb6fc4c2a810")))
                {
                    reader.BaseStream.CopyTo(memoryStream);
                }

                byte[] byteResponse = memoryStream.ToArray();

                Assert.IsTrue(rawWav.SequenceEqual(byteResponse));
            }
            catch (PersyException pe)
            {
                Assert.Fail(pe.Message);
            }
        }
    }
}
